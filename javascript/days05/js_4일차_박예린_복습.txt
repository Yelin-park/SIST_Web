
1. 이름과 나이 변수를 선언하고 초기화 한 후 
   이름은 "홍길동"이고, 나이는 20살입니다. 
   형식으로 출력하는 코딩을 하세요.
   <p id="demo"></p>

<script>
	var name = "홍길동";
	var age = 20;

	document.getElementById("demo").innerHTML = `이름은 \"${name}\" 이고, 나이는 "${age}"살 입니다.`
</script>
   
2. 숫자로 변환하는 함수 3가지를 적으세요
  ㄱ. parseInt()
  ㄴ. parseFloat()
  ㄷ. Number()
  
3. 배열에 사용되는 속성, 함수 설명하세요 . 
   ㄱ. sort() - 정렬하는 함수로 compareFunction를 주지 않으면 문자열을 기준으로 오름차순 정렬한다.
		compareFunction은 두 개의 배열 요소를 파라미터로 받는다. ab를 받고 리턴 값이 -1이면 a가 b보다 앞으로
		1이면 b가 a보다 앞으로, 0을 리턴하면 순서를 변경하지 않는다.
   ㄴ. reverse() - 배열을 반전하여 원본에 영향을 미친다.
   ㄷ. length - 배열의 길이를 구한다.
   ㄹ. forEach() - 배열의 해당 요소 값, 인덱스, 배열의 모든 값을 반환하는 메서드
   ㅁ. toString() - 배열의 요소들을 문자열로 변환한다.
   ㅂ. join() - 구분자로 요소를 연결해서 문자열로 반환하는 메서드
   ㅅ. push() - 새로운 요소를 맨 마지막에 추가한다. 리턴 값은 배열의 크기
   ㅇ. pop() - 배열의 가장 마지막 요소를 가져오고 인덱스 자리는 사라진다.
   ㅈ. shift() - 배열의 맨 처음 요소를 가져오고 인덱스 자리는 사라진다.
   ㅊ. unshift() - 새로운 요소를 맨 처음에 추가한다. 리턴 값은 배열의 크기
   ㅋ. delete - 배열의 원하는 위치 값의 요소를 삭제, 인덱스 자리는 남아있다.
   ㅌ. concat() - 두 개의 배열이나 값 + 배열을 새로운 배열로 반환하는 메서드
   ㅍ. splice() - 새로운 요소를 원하는 위치 값에 추가하거나 삭제할 때 사용하는 메서드
   ㅎ. slice() - 배열의 일부를 잘라서 새 배열로 만드는 메서드
   
4-1.   배열 m을 선언하고 1~100 사이의 랜덤한 값을 채워 넣고 
     <p id="demo"></p> 에   ul/li 태그로 출력하는 js 코딩을 하세요.     
<script>
	const m = [];
	
	for (var i = 0; i < 10; i++) {
		m[i] = Math.floor(Math.random() * 100) + 1;
		// parseInt(Math.random() * 100) + 1) // parseInt가 내림하고 정수로 바꿔줌
	}
	
	var text = "<ul><li>";
		
	text += m.join("</li><li>");
	
	text += "</li></ul>";
	$("#demo").html(text);
</script>


4-2. 배열의 0 번째 요소에   101 값을 채워넣는 코딩을 하세요 .
m[0] = 101;
m.unshift(101);

4-3. 배열의 2 번째 요소 값을 제거하는 코딩을 하세요. 
m.splice(2, 1);

4-4. 배열의 3 번째 요소에 205를 삽입하는 코딩을 하세요.  
m.splice(3, 0, 205);

4-5. 배열의 0 번째 요소값을 제거하고 얻어가는 코딩을 하세요 . 
m.pop()

4-6. 배열의 가장 큰값 ,가장 작은값 출력
    var max = array[0];
    var min = array[0];

    for (var i = 0; i < array.length; i++) {
        max = array[i] < max ? max : array[i];
        min = array[i] > min ? min : array[i];
    }

    console.log(max);
    console.log(min);

m.sort ((a,b) => a-b);
console.log(`min : ${m[0]}, max : ${m[m.length-1]}`);

	// apply() 함수?
	var m = [10, 30, 20, 100, 90];
	let max = Math.max.apply(null, m);
	let max = Math.min.apply(null, m);

5. m 배열의 각 요소의 값을 두 배 증가하시킨 새로운 배열 n 을 만들어서 출력하세요.
	var m = [45, 4, 9, 16, 25];
	var n = [];
	
	// 방법1)
	for (var i = 0; i < m.length; i++) {
		n[i] = m[i] * 2;
	}
	
	// 방법2)
	for (var i = 0; i < m.length; i++) n.push(m[i] * 2);
	
	console.log(n.toString());
	
	
// 강사님 풀이
<script>
var m = [45, 4, 9, 16, 25];
var n = [];

	// map() : 자동으로 각 배열의 요소에 대해 함수를 수행하여 새로운 배열을 생성하는 메서드
	// var n = m.map(function (elt, i, array) {
	var n = m.map(function (elt) { // 필요한 매개변수만 남겨도 된다.
		return elt * 2; // 각각의 요소에 대해서 함수를 수행하여 돌려준다.
	});
	
	console.log(n.toString());
</script>

6. m 배열의 각 요소의 값 중 15보다 큰 것만으로 새로운 배열 n 을 만들어서 출력하세요. 
	var m = [45, 4, 9, 16, 25];
	var n = [];
	
	for (var i = 0; i < m.length; i++) {
		if(m[i] > 15) n.push(m[i])
	}
	
	console.log(n.toString());

<script>
	var m = [45, 4, 9, 16, 25];
	// filter() : 조건을 만족하는(만족하면 true, false 반환) 배열의 요소만을 가진 새로운 배열을 생성하는 함수
	var n = m.filter(function(elt, i, array) {
		return elt > 15;
	});
	
	// 위의 코딩을 람다식으로 표현
	var n = m.filter((elt) => {return elt > 15 } );
	
	console.log(n.toString());

</script>

7. m 배열의 모든 요소의 합을 구해서 출력하세요. 
	var m = [45, 4, 9, 16, 25];
	var sum = 0;
	
	for (var i = 0; i < m.length; i++) {
		sum += m[i];
	}
	
	console.log(sum);

<script>
	var m = [45, 4, 9, 16, 25];
	// reduce() : 왼쪽에서 부터 처리, 각 배열의 요소들이 함수 실행을 거쳐 단일 값을 생성해서 반환하는 메서드(요소 -> 함수 -> 단일 값 생성)
	// reduceRight : 오른쪽에서 부터 처리
	// m.reduce(function(sum, elt, i, array){
 	let result = m.reduce(function(sum, elt, i, array){
		return sum + elt;
	}, 0); // sum = 0 으로 하는 초기 값 설정 
	
	// 위의 코딩 람다식 표현
	let result = m.reduce((sum, elt) => {return sum + elt});
	console.log(result);
</script>	

8.  1~5 사이의 임의의 값을 n 변수 저장하고 m 배열에 중복되는 지를 체크하는 코딩을 하세요 . 
var m = [ 1, 3, 5 ];

<script>
		var m = [ 1, 3, 5 ];
		var n = Math.floor(Math.random() * 5) + 1;
				
		for (let i = 0; i < m.length; i++) {
			if (n === m[i]) {
				console.log("중복값 : " + n);
				break;
			}
		}
</script>

<script>
	function isDuplication(m, n) {
		for (var i = 0; i < m.length; i++) {
			if(m[i] == n) return true;
		}
		return false;
	}
	
	var m = [ 1, 3, 5 ];
	var n = Math.floor(Math.random() * 5) + 1;
	
	var check = isDuplication(m, n);
	console.log(check ? "중복O" : "중복X");
</script>

<script>
		var m = [ 1, 3, 5 ];
		var n = parseInt(Math.random() * 5) + 1;
		// every() : 배열의 모든 요소가 조건에 만족하는 지 여부를 반환하는 메서드(만족하면 true, 아니면 false)
		var check = m.every(function (elt, i, array) {
			return n != elt;
		});
		console.log(n);
		console.log(check);
		
		// some() : 배열의 하나의 요소라도 조건에 만족하면 true, 아니라면 false 반환하는 함수
		
</script>
          
      
      
      
      
      
      
      
      
      
      
      
      
